#!/bin/sh -e

# Frontend CLI to duplicity to implement a backup policy of unlimited full and
# incremental backups. Full backups are a time checkpoint, triggering deletion
# of any incremental backups made so far. Companion PAR2 files are created to
# allow for automatic error detection and correction of backup data.
#
# The first backup made is a full backup. Next backups are incremental backups
# over the last full backup, or a full backup. When a new full backup is made,
# all incremental backups are cleared. The following ASCII art represents the
# possible states of a backup collection over time.
#
# ---------------  ----------------------         ----------------------
#  Full backup 1 -> Incremental backup 1 -> ... -> Incremental backup n
# ---------------  ----------------------         ----------------------
# ---------------  ---------------         ----------------------
#  Full backup 1 -> Full backup 2 -> ... -> Incremental backup 1 -> ...
# ---------------  ---------------         ----------------------
# (Any incremental backups made since full backup 1 until full backup 2 were
# removed)

# shellcheck disable=SC2089
readonly PASSPHRASE="{{ lookup('ansible.builtin.password', 'secrets/backup_passphrase', length=32) }}"

show_usage() {
  echo "Usage: $0 [-h] [-i <ID>] [-d <DIRECTORY>] [-e <FILES TO EXCLUDE>] [-v] <VERB: incremental, full_and_clear_all_incrementals, interactive_restore>" >&2
}

while getopts vi:d:e:h option; do
  case $option in
    i) # Backup collection identifier
      readonly ID="$OPTARG";;
    d) # Directory to backup or restore
      readonly DIRECTORY="$OPTARG";;
    e) # List of files to exclude
      readonly FILES_TO_EXCLUDE="$OPTARG";;
    v) # Verbose duplicity output
      DUPLICITY_VERBOSE=1;;
    h|*) # Help
      show_usage
      exit 1;;
  esac
done

if [ -z "$ID" ]; then
  echo 'Missing backup collection identifier parameter' >&2
  show_usage
  exit 1
fi

if [ -z "$DIRECTORY" ]; then
  echo 'Missing directory to backup or restore parameter' >&2
  show_usage
  exit 1
fi

shift $((OPTIND - 1))

if [ $# -lt 1 ]; then
  echo "Missing verb" >&2
  show_usage
  exit 1
fi

readonly TARGET_URL="par2+multi:///etc/duplicity/$ID.json?mode=mirror"

# shellcheck disable=SC2090
export PASSPHRASE

case "$1" in
  incremental)
    # Will do a full backup if there isn't any full backup
    echo "$FILES_TO_EXCLUDE" | \
      duplicity ${DUPLICITY_VERBOSE:+-vinfo} --progress "$DIRECTORY" "$TARGET_URL" \
      ${FILES_TO_EXCLUDE:+--exclude-filelist /proc/self/fd/0};;

  full_and_clear_all_incrementals)
    echo "$FILES_TO_EXCLUDE" | \
      duplicity full ${DUPLICITY_VERBOSE:+-vinfo} --progress \
      ${FILES_TO_EXCLUDE:+--exclude-filelist /proc/self/fd/0} \
      "$DIRECTORY" "$TARGET_URL"
    duplicity remove-all-inc-of-but-n-full 1 ${DUPLICITY_VERBOSE:+-vinfo} --force --progress "$TARGET_URL";;

  interactive_restore)
    echo "Restoring files on $DIRECTORY from backups"

    while
      echo '- Relative file path to restore'
      echo '  Can be a directory to restore it and its contents'
      echo "  Leave blank to restore all files on $DIRECTORY"
      echo "  Example: world -> restore the world directory or file at $DIRECTORY/world"
      printf 'Relative file path to restore: '
      read -r file_to_restore

      echo "- Point in time to restore ${file_to_restore:+"$file_to_restore" at }$DIRECTORY to"
      echo '  Leave blank to restore files to the state they were in at the time of the last backup'
      echo '  Documentation on accepted values: https://duplicity.gitlab.io/stable/duplicity.1.html#time-formats'
      echo '  Examples: 1D -> as they were 1 day ago, 1998/12/22 -> as they were on December 22nd, 1998'
      printf 'Point in time: '
      read -r point_in_time

      echo "You are about to restore ${file_to_restore:+"$file_to_restore" at }$DIRECTORY to its state at ${point_in_time:-the last backup}."
      printf 'Are you sure? This operation can'\''t be undone, and will overwrite files at %s (y/n): ' "$DIRECTORY"
      read -r confirmation
      case "$confirmation" in
        y|Y)
          duplicity restore ${DUPLICITY_VERBOSE:+-vinfo} --force --progress \
          ${file_to_restore:+--file-to-restore "$file_to_restore"} \
          ${point_in_time:+--restore-time "$point_in_time"} \
          "$TARGET_URL" "$DIRECTORY"${file_to_restore:+/"$file_to_restore"}

          ! if [ -n "$file_to_restore" ]; then
            printf 'Do you want to restore another file? (y/n): '
            read -r confirmation
            ! [ "$confirmation" = 'y' ] || [ "$confirmation" = 'Y' ]
          fi;;
        *)
          printf 'Do you want to stop restoring a backup? (y/n): '
          read -r confirmation
          ! [ "$confirmation" = 'y' ] || [ "$confirmation" = 'Y' ];;
      esac
    do
      :
    done;;

  *)
    echo "Unknown verb: $1" >&2
    show_usage
    exit 1;;
esac
