#!/bin/sh -eu

# Frontend CLI to rustic to implement a backup policy of synthetic full backups,
# with older backups automatically being purged over time.

show_usage() {
  echo "Usage: $0 [-h] [-i <ID>] [-l <LABEL>] [-p] <VERB: backup, interactive_restore>" >&2
}

while getopts vi:l:ph option; do
  case $option in
    i) # Backup profile identifier
      readonly ID="$OPTARG";;
    l) # Backup snapshot label
      readonly LABEL="$OPTARG";;
    p) # Make the backup persistent
      readonly PERSISTENT_BACKUP=1;;
    h|*) # Help
      show_usage
      exit 1;;
  esac
done

if [ -z "$ID" ]; then
  echo 'Missing backup profile identifier parameter' >&2
  show_usage
  exit 1
fi

shift $((OPTIND - 1))

if [ $# -lt 1 ]; then
  echo "Missing verb" >&2
  show_usage
  exit 1
fi

case "$1" in
  backup)
    rustic -P "$ID" backup --init --set-compression=20 --log-level=error ${PERSISTENT_BACKUP:+--delete-never} --label="$LABEL"
    rustic -P "$ID" forget --log-level=error
    rustic -P "$ID" copy --init --log-level=error
    rustic -P "cloud_mega_$ID" forget --log-level=error;;

  interactive_restore)
    rustic -P "$ID" snapshots --all --log-level=error

    while
      echo "- Snapshot to restore ${file_to_restore:+"$file_to_restore" }from"
      echo '  Can be "latest" or the ID of a backup snapshot'
      while printf 'Snapshot: '; read -r snapshot; [ -z "$snapshot" ]; do
        echo 'Please specify a snapshot to restore from.'
      done

      echo '- File path to restore'
      echo '  Can be a directory to restore it and its contents'
      echo '  Leave blank to restore all files'
      echo "  Example: /srv/$ID/world -> restore the world directory or file within /srv/$ID"
      printf 'File path to restore: '
      read -r file_to_restore

      echo "You are about to restore ${file_to_restore:+"$file_to_restore" }to the state at snapshot $snapshot."
      printf 'Are you sure? This operation can'\''t be undone, and could overwrite files (y/n): '
      read -r confirmation
      case "$confirmation" in
        y|Y)
          rustic -P "$ID" restore --recursive ${file_to_restore:+--glob="${file_to_restore#/}"} \
          --log-level=error "$snapshot" /

          ! if [ -n "$file_to_restore" ]; then
            printf 'Do you want to restore another file? (y/n): '
            read -r confirmation
            ! [ "$confirmation" = 'y' ] || [ "$confirmation" = 'Y' ]
          fi;;
        *)
          printf 'Do you want to stop restoring a backup? (y/n): '
          read -r confirmation
          ! [ "$confirmation" = 'y' ] || [ "$confirmation" = 'Y' ];;
      esac
    do
      :
    done;;

  *)
    echo "Unknown verb: $1" >&2
    show_usage
    exit 1;;
esac
